DatabaseName : tel_book_db
DbUser : root
DbPassword : 1111

create table telbook(
id int primary key auto_increment,
name varchar(20) not null,
age int,
address varchar(200),
phone varchar(20) not null
);

insert into telbook (name, age, address, phone)
values('장원영', 20, '서울', '010-1111-2222');



CREATE TABLE girl_group
(
 g_id INT PRIMARY KEY AUTO_INCREMENT,
  name VARCHAR(32) NOT NULL,
  debut DATE NOT NULL,
  hit_song_id INT
);

CREATE TABLE song
(
  s_id INT PRIMARY KEY AUTO_INCREMENT,
  title VARCHAR(32) NOT NULL,
  lyrics VARCHAR(32)
);


INSERT INTO song (s_id, title, lyrics) VALUES (101, 'Tell Me', 'tell me tell me tetetete tel me');
INSERT INTO song (title, lyrics) VALUES ('Gee', 'GEE GEE GEE GEE GEE BABY BABY');
INSERT INTO song (title, lyrics) VALUES ('미스터', '이름이 뭐야 미스터');
INSERT INTO song (title, lyrics) VALUES ('Abracadabra', '이러다 미쳐 내가 여리여리');
INSERT INTO song (title, lyrics) VALUES ('8282', 'Give me a call Baby baby');
INSERT INTO song (title, lyrics) VALUES ('기대해', '기대해');
INSERT INTO song (title, lyrics) VALUES ('I Don\'t car', '다른 여자들의 다리를');
INSERT INTO song (title, lyrics) VALUES ('Bad Girl Good Girl', '앞에선 한 마디 말도');
INSERT INTO song (title, lyrics) VALUES ('피노키오', '뉴예삐오');
INSERT INTO song (title, lyrics) VALUES ('별빛달빛', '너는 내 별빛 내 마음의 별빛');
INSERT INTO song (title, lyrics) VALUES ('A', 'A 워오우 워오우워 우우우');
INSERT INTO song (title, lyrics) VALUES ('나혼자', '나 혼자 밥을 먹고 나 혼자 영화 보고');
INSERT INTO song (title, lyrics) VALUES ('LUV', '설레이나요 ');
INSERT INTO song (title, lyrics) VALUES ('짧은치마', '짧은 치마를 입고 내가 길을 걸으면');
INSERT INTO song (title, lyrics) VALUES ('위아래', '위 아래 위위 아래');
INSERT INTO song (title, lyrics) VALUES ('Dumb Dumb' , '너 땜에 하루종일');
INSERT INTO girl_group (name, debut, hit_song_id) 
VALUES ('원더걸스', '2007-09-12', 101);
INSERT INTO girl_group (name, debut, hit_song_id) 
VALUES ('소녀시대', '2009-06-03', 102);
INSERT INTO girl_group (name, debut, hit_song_id) 
VALUES ('카라', '2009-07-30', 103);
INSERT INTO girl_group (name, debut, hit_song_id) 
VALUES ('브라운아이드걸스', '2008-01-17', 104);
INSERT INTO girl_group (name, debut, hit_song_id) 
VALUES ('다비치', '2009-02-27', 105);
INSERT INTO girl_group (name, debut, hit_song_id) 
VALUES ('2NE1', '2009-07-08', 107);
INSERT INTO girl_group (name, debut, hit_song_id) 
VALUES ('f(x)', '2011-04-20', 109);
INSERT INTO girl_group (name, debut, hit_song_id) 
VALUES ('시크릿', '2011-01-06', 110);
INSERT INTO girl_group (name, debut, hit_song_id) 
VALUES ('레인보우', '2010-08-12', 111);
INSERT INTO girl_group (name, debut) 
VALUES ('에프터 스쿨', '2009-11-25');
INSERT INTO girl_group (name, debut) 
VALUES ('포미닛', '2009-08-28');




에프터 스쿨과 포미닛은 힛송이 없다
111 까지 밖에 없는데 
곡이 116까지 있음
여기에 없는 걸그룹의 히트송

g_id 걸그룹에 프라이머리키

s_id는 송에 프라이머리키
걸그룹에 포린키

오늘 할 것은
브라운 아이드 걸스의 히트송
두개의 테이블을 양쪽을 다 왔다갔다 하려면
결국은 찾을때 브라운 아이드 걸스의 104번을
songtable에서 찾아야함
서로 다른 곳에 데이터를 갖고있고
hitsonid와 sid로 연결 되어있음
104번을 가지고 song프라이머리키를 찾음
table을 안합쳐야 효율적으로 저장할 수 있고
data를 온전하게 보관하기 위해서 쪼개서 보관함

select * from girl_group as g
where g.hit_song_id = song.s_id;

select * from girl_group as g
inner join song as s
where g.hit_song_id = s.s_id;

모든걸 갖고오세요 걸그럽테이블
붙일거예요 송테이블이랑 
걸그룩 힛송이랑 송에 엣스언더바 아이디만 보여주세여
교집합

select * from girl_group as g
join song as s
where g.hit_song_id = s.s_id;

inner를 빼도됨
하지만 inner을명시적으로 넣음 -> 교집합

원더걸스만 찾고싶어
select g.name, g.debut, s.title from girl_group as g
inner join song as s
where g.hit_song_id = s.s_id
and g.name = '원더걸스';

table에 name이 g에만 있어도 붙여주도록 하자

select g.name, g.debut, s.title from girl_group as g
inner join song as s
on g.hit_song_id = s.s_id
where g.name = '원더걸스';

조금더 직관적
g는 걸그룩 s는 송
두번째 연결할 테이블 조인송
걸그룹 힛송 아이디와 송에 관련이 있어

select g.name, g.debut, s.title from song as s
inner join girl_group as g
on g.hit_song_id = s.s_id
where g.name = '원더걸스';

순서를 바꿔도 상관없음
교집합이기 때문

select g.g_id, g.name, g.hit_song_id, s.s_id, s.title 
from girl_group as g
left join song as s
on g.hit_song_id = s.s_id;

레프트는 연결되지 않은 애들도 몽따 ㅇ가지고 온것

select g.g_id, g.name, g.hit_song_id, s.s_id, s.title 
from girl_group as g
inner join song as s
on g.hit_song_id = s.s_id;

양쪽에 있는 것만 갖고옴 힛송 아이디를 기준으로해서
아이디가 일치한 애들만 갖고온게 이너조이

select g.g_id, g.name, g.hit_song_id, s.s_id, s.title 
from girl_group as g
right join song as s
on g.hit_song_id = s.s_id;

라잇트는 송 테이블 에 있는 걸 다 가지고옴

조인 공통

1. 시크릿과 카라의 히트곡 제목과 가사를 출력하세요.
2. 데뷔해가 2008년인 그룹의 id, 그룹이름, 데뷔일, 히트곡
제목을 출력하세요
(단, 그룹 이름에 대해 오름차순 출력)
3. 노랫가사에 me를 포함하는 데이터의 g_id, name, title, lyrics
를 출력하세요
4. 히트곡이 없는 그룹의 g_id, name, debut 를 출력하세요.
5. 각 해별로 데뷔한 그룹의 수를 출력하세요.

1. 
select s.title, s.lyrics 
from song as s
inner join girl_group as g
on g.hit_song_id = s.s_id
where g.name = '카라'
or g.name = '시크릿';
---------------------
select s.title, s.lyrics 
from girl_group as g
inner join song as s
on g.hit_song_id = s.s_id
where g.name in ('카라', '시크릿');

===================================

2. 
select g.g_id, g.name, g.debut, s.title
from song as s
inner join girl_group as g
on g.hit_song_id = s.s_id
where g.debut like '%2009%' 
order by g.name asc;
------------------------
select g.g_id, g.name, g.debut, s.title
from girl_group as g
inner join song as s
on g.hit_song_id = s.s_id
where g.debut between '2009-1-1' and '2009-12-31' 
order by g.name asc;

=======================================

3. 
select g.g_id, g.name, s.title, s.lyrics
from song as s
inner join girl_group as g
on g.hit_song_id = s.s_id
where s.lyrics like '%me%';
-------------------------------
select g.g_id, g.name, s.title, s.lyrics
from girl_group as g
inner join song as s
on g.hit_song_id = s.s_id
where s.lyrics like '%me%';

=========================

4.
select g.g_id, g.name, g.debut
from girl_group as g
where g.hit_song_id is null;
----------------------------
select g_id, name, debut
from girl_group
where hit_song_id is null;


============================

문제 2. 회사이름, 그룹이름, 데뷔일, 노래제목 출력... (데뷔일에 대해서 내림차순)
select g.name, g.debut, e.name, s.title
from girl_group as g
inner join song as s 
on g.hit_song_id = s.s_id
inner join entertainment as e 
on g.enter_id = e.e_id
order by g.debut desc;
-----------------------------------------
select e.name, g.name, g.debut, s.title
from entertainment as e
inner join girl_group as g
on e.e_id = g.enter_id
inner join song as s
on g.hit_song_id = s.s_id
order by g.debut desc;


===========================

문제 3. 소속사 별 소속그룹 수 출력... 소속그룹 수별 내림차순
select e.name, count(g.name) from girl_group as g
inner join entertainment as e
on g.enter_id = e.e_id
group by e.name order by count(g.name) desc;
-------------------------------------------
select e.name, count(g.name) as count from entertainment as e
inner join girl_group as g
on e.e_id = g.enter_id
group by e.name order by count desc;


=============================
create table emplyee(
id int primary key auto_increment,
name varchar(20) not null,
superior_id int);

INSERT INTO emplyee (name, superior_id) 
VALUES ('김사장', null);
INSERT INTO emplyee (name, superior_id) 
VALUES ('정과장', 1);
INSERT INTO emplyee (name, superior_id) 
VALUES ('최대리', 2);
INSERT INTO emplyee (name, superior_id) 
VALUES ('이대리', 2);
INSERT INTO emplyee (name, superior_id) 
VALUES ('박고문', null);